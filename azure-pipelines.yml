# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

strategy:
  matrix:
    windows:
      qtfile: '5.12.3-win.7z'
      imageName: 'windows-latest'
    linux:
      qtfile: '5.12.3-linux.tar.xz'
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'

pool:
  vmImage: $(imageName)

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'release'
  qtver: '5.12.3'

steps:
- task: PowerShell@2
  displayName: 'Grab Qt (Win)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  inputs:
    filePath: 'ci/download_qt.ps1'
  env:
    QT_SOURCE_URL: '$(qtSource)$(qtfile)'
- task: Bash@3
  displayName: 'Install Qt (Linux)'
  condition: eq(variables['Agent.OS'], 'Linux')
  inputs:
    targetType: 'inline'
    script: |
      sudo add-apt-repository ppa:beineri/opt-qt-5.12.3-xenial
      sudo apt-get update
      sudo apt-get install qt512base -y
      echo "##vso[task.setvariable variable=QTDIR]/opt/qt512"
      echo "##vso[task.setvariable variable=PATH]${PATH}:/opt/qt512/bin"
      echo "##vso[task.setvariable variable=LD_LIBRARY_PATH]${LD_LIBRARY_PATH}:/opt/qt512/lib:/opt/qt512/lib/x86_64-linux-gnu"
      echo "##vso[task.setvariable variable=PKG_CONFIG_PATH]${PKG_CONFIG_PATH}:/opt/qt512/lib/pkgconfig"
- task: Bash@3
  displayName: 'Install Qt (Mac)'
  condition: eq(variables['Agent.OS'], 'Darwin')
  inputs:
    targetType: 'inline'
    script: |
      brew install qt
      echo "##vso[task.setvariable variable=PATH]${PATH}:/usr/local/opt/qt/bin"
- task: ExtractFiles@1
  displayName: 'Extract Qt'
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  inputs:
    archiveFilePatterns: '$(qtfile)'
    destinationFolder: 'Qt'
- task: Bash@3
  displayName: 'Build'
  condition: ne(variables['Agent.OS'], 'Windows_NT')
  inputs:
    targetType: 'inline'
    script: |
      mkdir -p ${BUILD_REPOSITORY_LOCALPATH}/${BUILDPLATFORM}/${BUILDCONFIGURATION}
      cd ${BUILD_REPOSITORY_LOCALPATH}/${BUILDPLATFORM}/${BUILDCONFIGURATION}
      qmake ${BUILD_REPOSITORY_LOCALPATH}/AzureTest/*.pro
      # Fix qmake forcefully downgrading -std= specification to any of c++11, c++14 or c++1z.
      awk '{gsub(" -std=c\\+\\+1[147z]", ""); print $0}' Makefile > mk2 && mv -f mk2 Makefile
      #awk '{print gensub(" -std=c\\+\\+[1-2][1-9a-z]", "", 2)}' Makefile > mk2 && mv -f mk2 Makefile
      make
- task: VSBuild@1
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- task: PublishPipelineArtifact@0
  inputs:
    artifactName: '$(buildConfiguration)-$(buildPlatform)-$(Agent.OS)'
    targetPath: '$(buildPlatform)/$(buildConfiguration)'
