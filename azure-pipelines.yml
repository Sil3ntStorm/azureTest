# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

strategy:
  matrix:
    windows:
      qtfile: '5.12.3-win.7z'
      imageName: 'windows-latest'
    linux:
      qtfile: '5.12.3-linux.tar.xz'
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'

pool:
  vmImage: $(imageName)

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'release'
  qtver: '5.12.3'

steps:
- task: PowerShell@2
  displayName: 'Install Qt'
  condition: ne(variables['Agent.OS'], 'Darwin')
  inputs:
    filePath: 'ci/download_qt.ps1'
  env:
    QT_SOURCE_URL: '$(qtSource)$(qtfile)'
- task: Bash@3
  displayName: 'Install Qt (Mac)'
  condition: eq(variables['Agent.OS'], 'Darwin')
  inputs:
    targetType: 'inline'
    script: |
      brew install qt
      ln -s /usr/local/opt/qt Qt
      echo "##vso[task.setvariable variable=PATH]${PATH}:/usr/local/opt/qt/bin"
      find /usr/local/Cellar/qt -iname qmake.conf | grep -v ": Permission denied" | grep -v ": Operation not permitted"
      cat /usr/local/Cellar/qt/5.12.3/mkspecs/macx-clang/qmake.conf
      cat /usr/local/Cellar/qt/5.12.3/mkspecs/common/macx.conf
- task: ExtractFiles@1
  displayName: 'Extract Qt'
  condition: ne(variables['Agent.OS'], 'Darwin')
  inputs:
    archiveFilePatterns: '$(qtfile)'
    destinationFolder: 'Qt'
- task: Bash@3
  displayName: 'Build'
  condition: ne(variables['Agent.OS'], 'Windows_NT')
  inputs:
    targetType: 'inline'
    script: |
      which clang++
      which clang++-6
      which clang
      which clang-6
      echo $PATH
      echo `pwd`
      echo $QTDIR
      ls $QTDIR/mkspecs/features
      #PATH=`pwd`/Qt/bin:$PATH
      qmake --version
      qmake $QSPEC AzureTest/nix.pro
      make
      pwd
      ls -alh
      ls -alh AzureTest
- task: VSBuild@1
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- task: PublishPipelineArtifact@0
  inputs:
    artifactName: '$(buildConfiguration)-$(buildPlatform)'
    targetPath: '$(buildPlatform)/$(buildConfiguration)'
